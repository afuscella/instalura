# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    types: [opened, reopened, synchronize]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest # The type of runner that the job will run on
    steps:
      # [Pre Build-step]
      - uses: actions/checkout@v2 ## Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/setup-node@v1
        with:
          node-version: '14.16.0'

      # Show node version
      - name: Node Version
        run: node -v

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      # Install modules using locals
      - name: Install Packages
        run: yarn --prefer-offline

      # Runs a set of commands using the runners shell
      - name: Display Diff Files
        run: yarn custom-scripts

      # Run linter
      - name: Run Linter (eslint)
        run: yarn lint

      # Run unit test
      - name: Run Unit Test with Coverage (jest --coverage)
        run: yarn test:coverage

      # Run sonarcloud scan for static code check and test coverage
      - name: Sonar Scan
        uses: SonarSource/sonarcloud-github-action@v1.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.verbose=false

  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest # The type of runner that the job will run on
    steps:
      # [Pre Build-step]
      - uses: actions/checkout@v2 ## Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/setup-node@v1
        with:
          node-version: '14.16.0'

      # Show node version
      - name: Node Version
        run: node -v

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      # Install modules using locals
      - name: Install Packages
        run: yarn --prefer-offline

      # Run integration tests
      - name: Run Integration Tests
        run: yarn test:integration:build
        env:
          DATO_CMS_TOKEN: ${{ secrets.DATO_CMS_TOKEN }}
